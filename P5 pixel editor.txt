import cv2
import numpy as np

def click_event(event, x, y, flags, param):
    global img
    block_size = 10  # Define the size of the block around the click
    half_block = block_size // 2
    if event == cv2.EVENT_LBUTTONDOWN:
        # Show the current pixel color at the center of the block
        blue, green, red = img[y, x]
        print(f"Current Center Color - Coordinates ({x}, {y}): BGR({blue}, {green}, {red})")
        color_str = input("Enter new BGR color (format: blue,green,red) or type 'reset' to remove data: ")
        start_x = max(x - half_block, 0)
        start_y = max(y - half_block, 0)
        end_x = min(x + half_block + 1, img.shape[1])
        end_y = min(y + half_block + 1, img.shape[0])
        
        if color_str.lower() == 'reset':
            # Reset the block to black
            img[start_y:end_y, start_x:end_x] = [0, 0, 0]
        else:
            # Set new color for the block
            try:
                new_color = tuple(map(int, color_str.split(',')))
                img[start_y:end_y, start_x:end_x] = new_color
            except ValueError:
                print("Invalid color format. No changes made.")
        update_image()

def update_image():
    # Refresh the image display to show changes
    cv2.imshow('Image Editor', img)
    cv2.waitKey(1)  # Small delay to allow for refresh without closing

# Load image
img_path = r"C:\Users\jabar\OneDrive\Pictures\Saved Pictures\https-media-brabus-com-resources-persistent-0-4-d-8-04d87b61f90f71d171b3a9e2bf7b68d2d563a09e-brabus-20rocket-20900-grey-20-28612-20von-20633-29-1603459586.jpg"  # Replace with your actual image path
img = cv2.imread(img_path)

if img is None:
    print("Failed to load image.")
else:
    cv2.imshow('Image Editor', img)
    cv2.setMouseCallback('Image Editor', click_event)

    # Continuous loop to keep the window open
    while True:
        if cv2.waitKey(1) & 0xFF == ord('q'):  # Press 'q' to quit
            break

    cv2.destroyAllWindows()

